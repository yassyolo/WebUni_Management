// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebUni_Management.Data;

#nullable disable

namespace WebUni_Management.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240407114633_Test2")]
    partial class Test2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("BookBookAuthor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b242640e-291a-4de7-9701-e3e8e0afb0c9",
                            RoleId = "02853dfe-8461-47a5-b545-8aab884099a3"
                        },
                        new
                        {
                            UserId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            RoleId = "25b7786d-75f0-42a0-94a5-64eef4ca93a6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("StudentsId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("SubjectSubjectProfessor", b =>
                {
                    b.Property<int>("SubjectProfessorsId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectsId")
                        .HasColumnType("int");

                    b.HasKey("SubjectProfessorsId", "SubjectsId");

                    b.HasIndex("SubjectsId");

                    b.ToTable("SubjectSubjectProfessor");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Admin identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Admin identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasComment("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "b242640e-291a-4de7-9701-e3e8e0afb0c9"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("InitialPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b242640e-291a-4de7-9701-e3e8e0afb0c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "db8b841e-824a-44ef-9ed4-4f708071ab7e",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            InitialPassword = "",
                            IsApproved = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "00000001",
                            PasswordHash = "AQAAAAEAACcQAAAAEEBsKeauewLkz/vHZgGgFsZ44AQRAOoVakj+nK+U1J5Z9O7WqAAm7xaxXDuGVFJOGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "27563151-9049-41aa-a609-b33b469fea6e",
                            TwoFactorEnabled = false,
                            UserName = "00000001"
                        },
                        new
                        {
                            Id = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d41e5ea-c2ac-418e-98c2-90afd93fe598",
                            Email = "student@gmail.com",
                            EmailConfirmed = true,
                            InitialPassword = "",
                            IsApproved = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "12345678",
                            PasswordHash = "AQAAAAEAACcQAAAAEJfrtR07DYwuUP99o5tHWAO1BjdfaVJ63jKX2MMdqQr0LZVPcMillKTTwbOkEn2E9g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f6c0c43c-a6ad-4754-9f22-78440810a104",
                            TwoFactorEnabled = false,
                            UserName = "12345678"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Book Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Book category identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Book description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Book image URL");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit")
                        .HasComment("Is book rented");

                    b.Property<int?>("LibraryId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Library identifier");

                    b.Property<string>("PublishYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Book publish year");

                    b.Property<DateTime?>("RentalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Rent date of the book");

                    b.Property<int>("RentalTime")
                        .HasColumnType("int")
                        .HasComment("Rental time");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Book renter identifier");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Book title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("RenterId");

                    b.HasIndex("StudentId");

                    b.ToTable("Books");

                    b.HasComment("Book entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "'Math for Scientists: Refreshing the Essentials' offers a concise yet comprehensive review of fundamental mathematical concepts essential for scientists.Co - authored by Branislava Ćurčić - Blake and Natalia Maria, this book serves as a valuable resource for refreshing and reinforcing mathematical skills necessary for scientific inquiry.",
                            ImageUrl = "https://m.media-amazon.com/images/I/617vHgW8ZhL._SY522_.jpg",
                            IsRented = true,
                            LibraryId = 1,
                            PublishYear = "2017",
                            RentalDate = new DateTime(2024, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalTime = 0,
                            RenterId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            Title = "Math for Scientists: Refreshing the Essentials"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Master Math effortlessly with this comprehensive guide. Ideal for beginners and intermediates, it features step-by-step explanations, practice questions, and chapter summaries for confident learning. No separate workbooks needed!",
                            ImageUrl = "https://m.media-amazon.com/images/I/71EUTt1F2vL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2018",
                            RentalTime = 0,
                            Title = "Mathematics: A Complete Introduction"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "'Simplified Statistics and Probability' is a comprehensive book designed for high school and college students. It offers clear explanations, numerous examples, and practice exercises with answers for self-assessment, enhancing understanding and proficiency in the subject.",
                            ImageUrl = "https://m.media-amazon.com/images/I/61CANeMV8wL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2018",
                            RentalTime = 0,
                            Title = "Simplified Statistics and Probability: A Mathematics Book for High Schools and Colleges"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "'Basic Organic Chemistry' covers fundamental concepts, organic molecules, functional groups, nomenclature, acids/bases, stereochemistry, amino acids, proteins, carbohydrates, alcohols, ethers, and spectroscopy, offering insights for understanding organic reactions.",
                            ImageUrl = "https://m.media-amazon.com/images/I/813VoAjptdL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2019",
                            RentalTime = 0,
                            Title = "Basic Organic Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "'Engineering Physics' caters to first-year undergraduates at Jawaharlal Nehru Technical University. Covering crystallography, quantum mechanics, metals, dielectrics, semiconductors, superconductivity, lasers, holography, nanotechnology, and optics, it employs clear pedagogy for comprehensive learning.",
                            ImageUrl = "https://m.media-amazon.com/images/I/81p+3Q5hsvL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2010",
                            RentalTime = 0,
                            Title = "Engineering Physics"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Book author identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Book author first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Book author last name");

                    b.HasKey("Id");

                    b.ToTable("BookAuthors");

                    b.HasComment("Book author entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Natasha",
                            LastName = "Maurits"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Branislava",
                            LastName = "Ćurčić-Blake"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Hugh",
                            LastName = "Neill"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Kingsley",
                            LastName = "Augustine"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Ramesh",
                            LastName = "Chandra"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Mani",
                            LastName = "Naidu"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookByBookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("Book identifier");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Book author identifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookByBookAuthors");

                    b.HasComment("Book by book author entity");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 1,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 6
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Book category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Book category name");

                    b.HasKey("Id");

                    b.ToTable("BookCategories");

                    b.HasComment("Book category entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chemistry"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.CourseTerm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Course term identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasComment("Course major identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Course term name");

                    b.HasKey("Id");

                    b.HasIndex("MajorId");

                    b.ToTable("CourseTerm");

                    b.HasComment("Course term entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MajorId = 1,
                            Name = "Summer 24"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Dish identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Dish category");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasComment("Menu identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Dish name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Dish price");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Dishes");

                    b.HasComment("Canteen dish entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Salad",
                            MenuId = 1,
                            Name = "Greek Salad",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Salad",
                            MenuId = 1,
                            Name = "Caesar Salad",
                            Price = 1.50m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Main Dish",
                            MenuId = 1,
                            Name = "Spaghetti Carbonara",
                            Price = 2.00m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Main Dish",
                            MenuId = 1,
                            Name = "Chicken Alfredo",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Dessert",
                            MenuId = 1,
                            Name = "Tiramisu",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Dessert",
                            MenuId = 1,
                            Name = "Cheesecake",
                            Price = 1.50m
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Event identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("Event capacity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1100)
                        .HasColumnType("nvarchar(1100)")
                        .HasComment("Event description");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2")
                        .HasComment("Event end time");

                    b.Property<string>("GuestParticipant")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Guest participant for the event");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Event image URL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)")
                        .HasComment("Event name");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2")
                        .HasComment("Event start time");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasComment("Event entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 50,
                            Description = "Embark on a journey into the realm of software development with our captivating seminar on \"Why Choose C#.\" Led by a seasoned industry expert, this seminar delves deep into the myriad benefits and advantages of utilizing C# as your programming language of choice. From its robust object-oriented design to its versatility in application development, C# offers unparalleled opportunities for both novice and seasoned developers alike. Join us as we uncover the power and potential of C#, and discover why it remains a top choice in the ever-evolving landscape of technology. Reserve your seat now for an enlightening experience you won't want to miss!",
                            EndTime = new DateTime(2024, 4, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            GuestParticipant = "John Doe",
                            ImageUrl = "https://ardounco.sirv.com/WP_content.bytehide.com/2022/03/why-learn-csharp.png",
                            Name = "Exploring the Power of C#",
                            StartTime = new DateTime(2024, 4, 15, 14, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 65,
                            Description = "Join me for an insightful seminar where I delve into the fascinating world of embedded technologies and the Internet of Things (IoT). Discover how embedded systems are revolutionizing various industries, from smart homes to industrial automation. Learn about the latest trends, challenges, and opportunities in the realm of IoT, and explore real-world applications that are shaping the future of technology. Whether you're a seasoned engineer or an enthusiast curious about the possibilities of connected devices, this seminar promises to expand your knowledge and inspire innovation.",
                            EndTime = new DateTime(2024, 5, 2, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            GuestParticipant = "Jane Dimova",
                            ImageUrl = "https://builtin.com/sites/www.builtin.com/files/styles/og/public/2022-08/connected-devices-internet-of-things-iot-devices.png",
                            Name = "Exploring Embedded Technologies and IoT Seminar",
                            StartTime = new DateTime(2024, 5, 2, 15, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 30,
                            Description = "Join us for an illuminating seminar as we explore the profession of QA (Quality Assurance) Tester and its pivotal role in ensuring the quality of software products. Gain insights into the responsibilities, methodologies, and best practices employed by QA testers to identify bugs, verify functionality, and enhance user experience. Discover how QA testing contributes to the success of software projects by mitigating risks and improving product reliability. Whether you're an aspiring QA tester or simply curious about the behind-the-scenes of software development, this seminar offers a comprehensive overview of the QA profession and its significance in delivering high-quality software.",
                            EndTime = new DateTime(2024, 3, 30, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            GuestParticipant = "Boris Cholakov",
                            ImageUrl = "https://testpro.io/wp-content/uploads/2023/11/qa-tester.jpg",
                            Name = "Unveiling the Role of QA Tester: Ensuring Quality in Software Development",
                            StartTime = new DateTime(2024, 3, 30, 11, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.EventParticipant", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasComment("Event identifier");

                    b.Property<string>("ParticipantId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Participant identifier");

                    b.HasKey("EventId", "ParticipantId");

                    b.HasIndex("ParticipantId");

                    b.ToTable("EventParticipant");

                    b.HasComment("Event participant entity");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            ParticipantId = "0e90dbeb-6468-4abc-9599-b4757e3874aa"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Faculty identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Faculty name");

                    b.HasKey("Id");

                    b.ToTable("Faculty");

                    b.HasComment("Faculty entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Library identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Library");

                    b.HasComment("Library entity");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Major", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Major identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasComment("Faculty identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Major name");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Major");

                    b.HasComment("Major entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacultyId = 1,
                            Name = "Computer Science"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Canteen identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Canteen date");

                    b.HasKey("Id");

                    b.ToTable("Menu");

                    b.HasComment("Menu entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.NewsArticle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("News article identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("News article author identifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1300)
                        .HasColumnType("nvarchar(1300)")
                        .HasComment("News article content text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("News article image URL");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("Is article approved for publishing");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime2")
                        .HasComment("News article published on");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("News article title");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("NewsArticles");

                    b.HasComment("News article entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Content = "With the start of a new study term, students are gearing up for a month-long examination period. Across educational institutions, there's a mix of anticipation and determination as learners of all ages prepare to showcase their knowledge.\r\n\r\nProfessors are finalizing exam schedules, ensuring students are ready for comprehensive assessments. Students are employing various study techniques, from late-night sessions to group study, to maximize their performance.\r\n\r\nThroughout the month, students will face challenges, but with determination, they're poised to excel. It's a time of growth and resilience as students strive for success in their academic endeavors.",
                            ImageUrl = "https://www.inspiringinterns.com/blog/wp-content/uploads/2017/05/time-481447-1200x849.jpg",
                            IsApproved = true,
                            PublishedOn = new DateTime(2024, 3, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "New Study Term Begins: Students Prepare for Month-Long Exams"
                        },
                        new
                        {
                            Id = 2,
                            Content = "In a significant stride towards enhancing educational opportunities, a local programming firm has stepped forward to sponsor a state-of-the-art computer facility. This initiative aims to empower students with access to cutting-edge technology and resources, thereby enriching their learning experience.\r\n\r\nWith the new facility, students can delve deeper into computer science and technology, exploring programming languages, software development, and digital literacy. The firm's sponsorship ensures that students receive a quality education, equipping them with essential skills for the modern workforce.\r\n\r\nThrough this partnership, the community sees the fusion of education and industry, paving the way for innovation and growth. It's a testament to the firm's commitment to nurturing talent and fostering development at the grassroots level.",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a5/Contemporary_Computer_Lab.jpg/1920px-Contemporary_Computer_Lab.jpg",
                            PublishedOn = new DateTime(2024, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Local Programming Firm Sponsors Computer Facility, Elevating Education Standards"
                        },
                        new
                        {
                            Id = 3,
                            Content = "In a heartwarming gesture to celebrate Dimitar's Name Day, the student board organized a delightful event filled with the aroma of freshly baked banitza. As part of the tradition, the student board members meticulously prepared homemade banitza, to honor Dimitar and bring joy to the campus community. The event, held in the university courtyard, attracted a crowd eager to indulge in this cherished delicacy. With laughter, students savored each bite of the warm banitza, symbolizing the spirit of togetherness and cultural pride. Amidst the festivities, professors expressed gratitude to the student board for their thoughtful gesture, emphasizing the importance of preserving cultural traditions within the university.",
                            ImageUrl = "https://www.nakotlona.bg/wp-content/uploads/2021/01/-%D0%B1%D0%B0%D0%BD%D0%B8%D1%86%D0%B0-e1609604417802.jpg",
                            PublishedOn = new DateTime(2023, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Student Board Celebrates Dimitar's Name Day with Homemade Banitza"
                        },
                        new
                        {
                            Id = 4,
                            Content = "Programming firms are opening their doors to students, offering an unique opportunity to explore career possibilities and gain valuable insights into the tech industry. The \"Day of Open Doors\" initiative aims to bridge the gap between academia and industry, allowing students to interact with professionals, showcase their skills, and learn about job opportunities.\r\n\r\nDuring these events, students are encouraged to bring their CVs and portfolios, ready to engage with recruiters and hiring managers. From software development to project management, companies present a range of roles available, catering to various skill levels and interests within the field of technology.\r\n\r\nIn addition to networking and recruitment opportunities, students can participate in workshops, panel discussions, and tech demos, gaining firsthand knowledge about the latest trends and technologies shaping the industry. Seasoned professionals are on hand to offer advice, mentorship, and career guidance, empowering students to make informed decisions about their future careers.\r\n\r\nThe \"Day of Open Doors\" serves as a platform for collaboration and knowledge exchange, fostering connections between aspiring technologists and industry leaders.",
                            ImageUrl = "https://www.asid.org/img/cache/events/Events/6964/lead_image/145229-720-405f-0dee4087947fd39207a5bb29630aac0b",
                            PublishedOn = new DateTime(2024, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Programming Firms Open Doors to Students: Explore Opportunities and Get Career Advice"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.NewsArticleReadStatus", b =>
                {
                    b.Property<int>("NewsArticleId")
                        .HasColumnType("int")
                        .HasComment("News article identifier");

                    b.Property<string>("ReaderId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User identifier");

                    b.Property<bool>("Read")
                        .HasColumnType("bit")
                        .HasComment("Read status");

                    b.HasKey("NewsArticleId", "ReaderId");

                    b.HasIndex("ReaderId");

                    b.ToTable("NewsArticleReadStatus");

                    b.HasComment("News article read status entity");

                    b.HasData(
                        new
                        {
                            NewsArticleId = 1,
                            ReaderId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            Read = true
                        },
                        new
                        {
                            NewsArticleId = 2,
                            ReaderId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            Read = true
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Student age");

                    b.Property<int>("CourseTermId")
                        .HasColumnType("int")
                        .HasComment("Student course term identifier");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasComment("Student faculty identifier");

                    b.Property<string>("FacultyNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("Student faculty number");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Student first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Student last name");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasComment("Student major identifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Student phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User id");

                    b.HasKey("Id");

                    b.HasIndex("CourseTermId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("MajorId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasComment("Student entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            CourseTermId = 1,
                            FacultyId = 1,
                            FacultyNumber = "12345678",
                            FirstName = "Yoana",
                            LastName = "Yotova",
                            MajorId = 1,
                            PhoneNumber = "0890320424",
                            UserId = "0e90dbeb-6468-4abc-9599-b4757e3874aa"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.StudyRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Study room identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("Study room capacity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Study room description");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasComment("Study room floor location");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Study room image URL");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit")
                        .HasComment("Is study room rented");

                    b.Property<int?>("LibraryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Library identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)")
                        .HasComment("Study room name");

                    b.Property<DateTime?>("RentalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Rent date of the room");

                    b.Property<int>("RentalTime")
                        .HasColumnType("int")
                        .HasComment("Rental time");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Study room renter identifier");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("RenterId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudyRooms");

                    b.HasComment("Study room entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 3,
                            Description = "Comfortable, productive space for focused work & collaboration. Equipped with modern amenities to support efficient work sessions. To enhance concentration, the room is designed with sound-absorbing materials to minimize distractions from outside noise.",
                            Floor = 1,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/calender-allen-architecture-llc-img~cd81328d0bb27f02_8-0752-1-86bb54d.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            Name = "Cozy Study Room for Three, a Heaven for Productivity",
                            RentalTime = 0
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 5,
                            Description = "Discover a Serene Study Haven: Our spacious room comfortably accommodates up to 5 people, offering ergonomic seating, ample desk space, and abundant natural light to foster productivity and concentration. Delight in the quiet ambiance and conducive environment for collaborative projects, group discussions, or solitary study sessions. Elevate your learning experience in this peaceful retreat designed for academic excellence and intellectual pursuits.",
                            Floor = 2,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/white-and-airy-jennifer-pacca-interiors-img~387173790a9ee6b8_8-4497-1-a0376b0.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            Name = "Study Nook, space for 5, fostering productivity and creativity",
                            RentalTime = 0
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 10,
                            Description = "Step into our expansive study sanctuary designed to accommodate up to 10 individuals. With abundant space, ergonomic furnishings, and a tranquil atmosphere, this room fosters focused study sessions, collaborative brainstorming, and group projects. Elevate your academic pursuits in this premium environment tailored for productivity and intellectual growth.",
                            Floor = 3,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/eclectic-and-colorful-greensboro-nc-jessica-dauray-interiors-elements-of-style-img~362195d10a0dcf59_8-0725-1-24dcf75.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            Name = "Elite Learning Oasis, The Grand Study Room for 10",
                            RentalTime = 0
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 1,
                            Description = "Escape to your own secluded sanctuary for uninterrupted focus and productivity. Our single study room, designed for one individual, offers a tranquil environment with ergonomic furnishings and ample natural light. Dive into your studies, research, or creative projects in complete privacy, free from distractions. Maximize your productivity and achieve your academic or professional goals in this serene haven tailored just for you.",
                            Floor = 1,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/contemporary-home-office-tazz-lighting-inc-img~259113440b895f26_8-5371-1-da12f0e.jpg",
                            IsRented = true,
                            LibraryId = 1,
                            Name = "Solitude Haven, Private Study Retreat",
                            RentalDate = new DateTime(2024, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalTime = 0,
                            RenterId = "0e90dbeb-6468-4abc-9599-b4757e3874aa"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Subject identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CourseTermId")
                        .HasColumnType("int")
                        .HasComment("Subject course term identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Subject description");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int")
                        .HasComment("Subject faculty identifier");

                    b.Property<int>("MajorId")
                        .HasColumnType("int")
                        .HasComment("Subject major identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Subject name");

                    b.Property<int>("TotlaAttendanceCount")
                        .HasColumnType("int")
                        .HasComment("Subject attendance times");

                    b.HasKey("Id");

                    b.HasIndex("CourseTermId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("MajorId");

                    b.ToTable("Subject");

                    b.HasComment("Subject entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseTermId = 1,
                            Description = "Calculus is a fundamental branch of mathematics that deals with rates of change and accumulation. It is used in various fields such as physics, engineering, economics, and computer science. This course covers topics such as limits, derivatives, integrals, and applications of calculus in real-world problems.",
                            FacultyId = 1,
                            MajorId = 1,
                            Name = "Calculus",
                            TotlaAttendanceCount = 13
                        },
                        new
                        {
                            Id = 2,
                            CourseTermId = 1,
                            Description = "Linear algebra is a branch of mathematics that studies vectors, vector spaces, linear transformations, and systems of linear equations. It is essential in various fields such as physics, engineering, computer science, and economics. This course covers topics such as matrices, determinants, vector spaces, eigenvalues, and eigenvectors.",
                            FacultyId = 1,
                            MajorId = 1,
                            Name = "Linear Algebra",
                            TotlaAttendanceCount = 15
                        },
                        new
                        {
                            Id = 3,
                            CourseTermId = 1,
                            Description = "Software architecture is the process of designing and defining the structure of a software system. It involves making high-level decisions about the organization and implementation of software components. This course covers topics such as architectural styles, design patterns, software quality attributes, and system decomposition.",
                            FacultyId = 1,
                            MajorId = 1,
                            Name = "Software Architecture",
                            TotlaAttendanceCount = 12
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.SubjectByProfessor", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasComment("Subject identifier");

                    b.Property<int>("ProfessorId")
                        .HasColumnType("int")
                        .HasComment("Professor identifier");

                    b.HasKey("SubjectId", "ProfessorId");

                    b.HasIndex("ProfessorId");

                    b.ToTable("SubjectByProfessor");

                    b.HasComment("Subject by professor entity");

                    b.HasData(
                        new
                        {
                            SubjectId = 1,
                            ProfessorId = 1
                        },
                        new
                        {
                            SubjectId = 1,
                            ProfessorId = 2
                        },
                        new
                        {
                            SubjectId = 2,
                            ProfessorId = 3
                        },
                        new
                        {
                            SubjectId = 3,
                            ProfessorId = 4
                        },
                        new
                        {
                            SubjectId = 2,
                            ProfessorId = 5
                        },
                        new
                        {
                            SubjectId = 3,
                            ProfessorId = 6
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.SubjectForStudent", b =>
                {
                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Student identifier");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int")
                        .HasComment("Subject identifier");

                    b.Property<int?>("AttendanceRecord")
                        .HasColumnType("int")
                        .HasComment("AttendanceRecord");

                    b.HasKey("StudentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectForStudent");

                    b.HasComment("Subject for student entity");

                    b.HasData(
                        new
                        {
                            StudentId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            SubjectId = 1,
                            AttendanceRecord = 5
                        },
                        new
                        {
                            StudentId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            SubjectId = 2,
                            AttendanceRecord = 7
                        },
                        new
                        {
                            StudentId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            SubjectId = 3,
                            AttendanceRecord = 12
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.SubjectProfessor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Subject Professor identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Professor description");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Professor email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Professor first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Professor last name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Professor email");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Professor title");

                    b.HasKey("Id");

                    b.ToTable("SubjectProfessors");

                    b.HasComment("Professor of subject entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Maria Ivanova is a dedicated professor with over 10 years of experience in teaching mathematics. She holds a Ph.D. in Mathematics from Sofia University and has published several research papers in the field.",
                            Email = "mivanova@gmail.com",
                            FirstName = "Maria",
                            LastName = "Ivanova",
                            PhoneNumber = "0888888888",
                            Title = "Professor"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Georgi Petrov is an enthusiastic assistant professor specializing in mathematics. He has a Master's degree in Mathematics from the University of Sofia and is passionate about teaching and research.",
                            Email = "gp@gmail.com",
                            FirstName = "Georgi",
                            LastName = "Petrov",
                            PhoneNumber = "0877777777",
                            Title = "Assistant"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ivan Georgiev is a dedicated professor with a background in mathematics and computer science. He holds a Bachelor's degree in Mathematics and a Master's degree in Computer Science.",
                            Email = "ivg@abv.bg",
                            FirstName = "Ivan",
                            LastName = "Georgiev",
                            PhoneNumber = "0899999999",
                            Title = "Professor"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Stefan Stefanov is a professor specializing in computer science. He has a Master's degree in Computer Science and is passionate about teaching and research.",
                            Email = "ssss@gmail.com",
                            FirstName = "Stefan",
                            LastName = "Stefanov",
                            PhoneNumber = "0888888883",
                            Title = "Professor"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ivanka Ivanova , an accomplished Linear Algebra Assistant, graduated with honors from the Mathematics Department at Sofia University \"St. Kliment Ohridski\" in Bulgaria. Her academic journey was marked by a deep fascination with abstract algebraic structures and their applications in various fields. During her undergraduate studies, Ivanka actively participated in research projects focusing on linear algebra and its role in computer science and data analysis.",
                            Email = "i@gmail.com",
                            FirstName = "Ivanka",
                            LastName = "Ivanova",
                            PhoneNumber = "0888888884",
                            Title = "Assistant"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Georgi Georgiev brings a wealth of expertise and practical experience to his teaching role. He obtained his Bachelor's degree in Computer Science from the Technical University of Sofia, Bulgaria, where he developed a strong foundation in software engineering principles and methodologies.",
                            Email = "g@gmail.com",
                            FirstName = "Georgi",
                            LastName = "Georgiev",
                            PhoneNumber = "0888888885",
                            Title = "Assistant"
                        });
                });

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.BookAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectSubjectProfessor", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.SubjectProfessor", null)
                        .WithMany()
                        .HasForeignKey("SubjectProfessorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Admin", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Book", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Student", null)
                        .WithMany("RentedBooks")
                        .HasForeignKey("StudentId");

                    b.Navigation("Category");

                    b.Navigation("Library");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookByBookAuthor", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.BookAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.CourseTerm", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Major", "Major")
                        .WithMany("CourseTerms")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Major");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Dish", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Menu", "Menu")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.EventParticipant", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Participant")
                        .WithMany()
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Participant");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Major", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Faculty", "Faculty")
                        .WithMany("Majors")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.NewsArticle", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Student", "Author")
                        .WithMany("NewsArticles")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Author");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.NewsArticleReadStatus", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.NewsArticle", "NewsArticle")
                        .WithMany()
                        .HasForeignKey("NewsArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Reader")
                        .WithMany()
                        .HasForeignKey("ReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewsArticle");

                    b.Navigation("Reader");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany("Students")
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Faculty", "Faculty")
                        .WithMany("Students")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Major", "Major")
                        .WithMany("Students")
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTerm");

                    b.Navigation("Faculty");

                    b.Navigation("Major");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.StudyRoom", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Library", "Library")
                        .WithMany("StudyRooms")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Student", null)
                        .WithMany("RentedStudyRooms")
                        .HasForeignKey("StudentId");

                    b.Navigation("Library");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Subject", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany()
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Major", "Major")
                        .WithMany()
                        .HasForeignKey("MajorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTerm");

                    b.Navigation("Faculty");

                    b.Navigation("Major");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.SubjectByProfessor", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.SubjectProfessor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Professor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.SubjectForStudent", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.CourseTerm", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Faculty", b =>
                {
                    b.Navigation("Majors");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("StudyRooms");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Major", b =>
                {
                    b.Navigation("CourseTerms");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Menu", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("NewsArticles");

                    b.Navigation("RentedBooks");

                    b.Navigation("RentedStudyRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
