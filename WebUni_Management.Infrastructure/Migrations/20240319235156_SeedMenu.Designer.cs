// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebUni_Management.Data;

#nullable disable

namespace WebUni_Management.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240319235156_SeedMenu")]
    partial class SeedMenu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.HasKey("AuthorId", "BooksId");

                    b.HasIndex("BooksId");

                    b.ToTable("BookBookAuthor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b242640e-291a-4de7-9701-e3e8e0afb0c9",
                            RoleId = "02853dfe-8461-47a5-b545-8aab884099a3"
                        },
                        new
                        {
                            UserId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            RoleId = "25b7786d-75f0-42a0-94a5-64eef4ca93a6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Admin identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Admin identifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Admins");

                    b.HasComment("Admin");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = "b242640e-291a-4de7-9701-e3e8e0afb0c9"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("InitialPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b242640e-291a-4de7-9701-e3e8e0afb0c9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "284da03d-a2b1-4e9f-8afa-279021950c87",
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            InitialPassword = "",
                            IsApproved = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "00000001",
                            PasswordHash = "AQAAAAEAACcQAAAAECKw1ctnloXOm6Qe0yPBCDoKG7MwLj5QYiTVubr5z4oFeFWomeyZ+tif4iIUn+F/pA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "06ab7db0-ada3-43b3-a4b0-c1dfe8425b51",
                            TwoFactorEnabled = false,
                            UserName = "00000001"
                        },
                        new
                        {
                            Id = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e615d62c-890a-4b34-bbe6-89ebc5b4d519",
                            Email = "student@gmail.com",
                            EmailConfirmed = true,
                            InitialPassword = "",
                            IsApproved = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@GMAIL.COM",
                            NormalizedUserName = "12345678",
                            PasswordHash = "AQAAAAEAACcQAAAAEKNttpMVxUJydzAp+NQvuX3DMKBkS7lVhExRwodl/CvlVen8exbTNZK5EY+LQMJxNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dc64f32e-2a19-4677-8bda-0612f8c84ebe",
                            TwoFactorEnabled = false,
                            UserName = "12345678"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Book Identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Book category identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)")
                        .HasComment("Book description");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Book image URL");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit")
                        .HasComment("Is book rented");

                    b.Property<int?>("LibraryId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasComment("Library identifier");

                    b.Property<string>("PublishYear")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasComment("Book publish year");

                    b.Property<DateTime?>("RentalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Rent date of the book");

                    b.Property<int>("RentalTime")
                        .HasColumnType("int")
                        .HasComment("Rental time");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Book renter identifier");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Book title");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("RenterId");

                    b.HasIndex("StudentId");

                    b.ToTable("Books");

                    b.HasComment("Book entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "'Math for Scientists: Refreshing the Essentials' offers a concise yet comprehensive review of fundamental mathematical concepts essential for scientists.Co - authored by Branislava Ćurčić - Blake and Natalia Maria, this book serves as a valuable resource for refreshing and reinforcing mathematical skills necessary for scientific inquiry.",
                            ImageUrl = "https://m.media-amazon.com/images/I/617vHgW8ZhL._SY522_.jpg",
                            IsRented = true,
                            LibraryId = 1,
                            PublishYear = "2017",
                            RentalDate = new DateTime(2024, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentalTime = 0,
                            RenterId = "0e90dbeb-6468-4abc-9599-b4757e3874aa",
                            Title = "Math for Scientists: Refreshing the Essentials"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Master Math effortlessly with this comprehensive guide. Ideal for beginners and intermediates, it features step-by-step explanations, practice questions, and chapter summaries for confident learning. No separate workbooks needed!",
                            ImageUrl = "https://m.media-amazon.com/images/I/71EUTt1F2vL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2018",
                            RentalTime = 0,
                            Title = "Mathematics: A Complete Introduction"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "'Simplified Statistics and Probability' is a comprehensive book designed for high school and college students. It offers clear explanations, numerous examples, and practice exercises with answers for self-assessment, enhancing understanding and proficiency in the subject.",
                            ImageUrl = "https://m.media-amazon.com/images/I/61CANeMV8wL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2018",
                            RentalTime = 0,
                            Title = "Simplified Statistics and Probability: A Mathematics Book for High Schools and Colleges"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 3,
                            Description = "'Basic Organic Chemistry' covers fundamental concepts, organic molecules, functional groups, nomenclature, acids/bases, stereochemistry, amino acids, proteins, carbohydrates, alcohols, ethers, and spectroscopy, offering insights for understanding organic reactions.",
                            ImageUrl = "https://m.media-amazon.com/images/I/813VoAjptdL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2019",
                            RentalTime = 0,
                            Title = "Basic Organic Chemistry"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "'Engineering Physics' caters to first-year undergraduates at Jawaharlal Nehru Technical University. Covering crystallography, quantum mechanics, metals, dielectrics, semiconductors, superconductivity, lasers, holography, nanotechnology, and optics, it employs clear pedagogy for comprehensive learning.",
                            ImageUrl = "https://m.media-amazon.com/images/I/81p+3Q5hsvL._SY522_.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            PublishYear = "2010",
                            RentalTime = 0,
                            Title = "Engineering Physics"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Book author identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Book author first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Book author last name");

                    b.HasKey("Id");

                    b.ToTable("BookAuthors");

                    b.HasComment("Book author entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Natasha",
                            LastName = "Maurits"
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Branislava",
                            LastName = "Ćurčić-Blake"
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Hugh",
                            LastName = "Neill"
                        },
                        new
                        {
                            Id = 4,
                            FirstName = "Kingsley",
                            LastName = "Augustine"
                        },
                        new
                        {
                            Id = 5,
                            FirstName = "Ramesh",
                            LastName = "Chandra"
                        },
                        new
                        {
                            Id = 6,
                            FirstName = "Mani",
                            LastName = "Naidu"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookByBookAuthor", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasComment("Book identifier");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int")
                        .HasComment("Book author identifier");

                    b.HasKey("BookId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("BookByBookAuthors");

                    b.HasComment("Book by book author entity");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            AuthorId = 1
                        },
                        new
                        {
                            BookId = 1,
                            AuthorId = 2
                        },
                        new
                        {
                            BookId = 2,
                            AuthorId = 3
                        },
                        new
                        {
                            BookId = 3,
                            AuthorId = 4
                        },
                        new
                        {
                            BookId = 4,
                            AuthorId = 5
                        },
                        new
                        {
                            BookId = 5,
                            AuthorId = 6
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Book category identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Book category name");

                    b.HasKey("Id");

                    b.ToTable("BookCategories");

                    b.HasComment("Book category entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mathematics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Physics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chemistry"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Dish identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Dish category");

                    b.Property<int>("MenuId")
                        .HasColumnType("int")
                        .HasComment("Menu identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)")
                        .HasComment("Dish name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Dish price");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Dishes");

                    b.HasComment("Canteen dish entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Salad",
                            MenuId = 1,
                            Name = "Greek Salad",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 2,
                            Category = "Salad",
                            MenuId = 1,
                            Name = "Caesar Salad",
                            Price = 1.50m
                        },
                        new
                        {
                            Id = 3,
                            Category = "Main Dish",
                            MenuId = 1,
                            Name = "Spaghetti Carbonara",
                            Price = 2.00m
                        },
                        new
                        {
                            Id = 4,
                            Category = "Main Dish",
                            MenuId = 1,
                            Name = "Chicken Alfredo",
                            Price = 2.50m
                        },
                        new
                        {
                            Id = 5,
                            Category = "Dessert",
                            MenuId = 1,
                            Name = "Tiramisu",
                            Price = 1.00m
                        },
                        new
                        {
                            Id = 6,
                            Category = "Dessert",
                            MenuId = 1,
                            Name = "Cheesecake",
                            Price = 1.50m
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Library", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Library identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("Id");

                    b.ToTable("Library");

                    b.HasComment("Library entity");

                    b.HasData(
                        new
                        {
                            Id = 1
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Canteen identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasComment("Canteen date");

                    b.HasKey("Id");

                    b.ToTable("Menu");

                    b.HasComment("Menu entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2024, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasComment("Student age");

                    b.Property<string>("FacultyNumber")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)")
                        .HasComment("Student faculty number");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Student first name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Student last name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Student phone number");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("User id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Students");

                    b.HasComment("Student entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 20,
                            FacultyNumber = "12345678",
                            FirstName = "Yoana",
                            LastName = "Yotova",
                            PhoneNumber = "0890320424",
                            UserId = "0e90dbeb-6468-4abc-9599-b4757e3874aa"
                        });
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.StudyRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Study room identifier");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int")
                        .HasComment("Study room capacity");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Study room description");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasComment("Study room floor location");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Study room image URL");

                    b.Property<bool>("IsRented")
                        .HasColumnType("bit")
                        .HasComment("Is study room rented");

                    b.Property<int?>("LibraryId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasComment("Library identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(110)
                        .HasColumnType("nvarchar(110)")
                        .HasComment("Study room name");

                    b.Property<DateTime?>("RentalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Rent date of the room");

                    b.Property<string>("RenterId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Study room renter identifier");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LibraryId");

                    b.HasIndex("RenterId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudyRooms");

                    b.HasComment("Study room entity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 3,
                            Description = "Comfortable, productive space for focused work & collaboration. Equipped with modern amenities to support efficient work sessions. To enhance concentration, the room is designed with sound-absorbing materials to minimize distractions from outside noise.",
                            Floor = 1,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/calender-allen-architecture-llc-img~cd81328d0bb27f02_8-0752-1-86bb54d.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            Name = "Cozy Study Room for Three, a Heaven for Productivity"
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 5,
                            Description = "Discover a Serene Study Haven: Our spacious room comfortably accommodates up to 5 people, offering ergonomic seating, ample desk space, and abundant natural light to foster productivity and concentration. Delight in the quiet ambiance and conducive environment for collaborative projects, group discussions, or solitary study sessions. Elevate your learning experience in this peaceful retreat designed for academic excellence and intellectual pursuits.",
                            Floor = 2,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/white-and-airy-jennifer-pacca-interiors-img~387173790a9ee6b8_8-4497-1-a0376b0.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            Name = "Study Nook, space for 5, fostering productivity and creativity"
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 10,
                            Description = "Step into our expansive study sanctuary designed to accommodate up to 10 individuals. With abundant space, ergonomic furnishings, and a tranquil atmosphere, this room fosters focused study sessions, collaborative brainstorming, and group projects. Elevate your academic pursuits in this premium environment tailored for productivity and intellectual growth.",
                            Floor = 3,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/eclectic-and-colorful-greensboro-nc-jessica-dauray-interiors-elements-of-style-img~362195d10a0dcf59_8-0725-1-24dcf75.jpg",
                            IsRented = false,
                            LibraryId = 1,
                            Name = "Elite Learning Oasis, The Grand Study Room for 10"
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 1,
                            Description = "Escape to your own secluded sanctuary for uninterrupted focus and productivity. Our single study room, designed for one individual, offers a tranquil environment with ergonomic furnishings and ample natural light. Dive into your studies, research, or creative projects in complete privacy, free from distractions. Maximize your productivity and achieve your academic or professional goals in this serene haven tailored just for you.",
                            Floor = 1,
                            ImageUrl = "https://st.hzcdn.com/simgs/pictures/home-offices/contemporary-home-office-tazz-lighting-inc-img~259113440b895f26_8-5371-1-da12f0e.jpg",
                            IsRented = true,
                            LibraryId = 1,
                            Name = "Solitude Haven, Private Study Retreat",
                            RentalDate = new DateTime(2024, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RenterId = "0e90dbeb-6468-4abc-9599-b4757e3874aa"
                        });
                });

            modelBuilder.Entity("BookBookAuthor", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.BookAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Admin", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Book", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.BookCategory", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Library", "Library")
                        .WithMany("Books")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Student", null)
                        .WithMany("RentedBooks")
                        .HasForeignKey("StudentId");

                    b.Navigation("Category");

                    b.Navigation("Library");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookByBookAuthor", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.BookAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Dish", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Menu", "Menu")
                        .WithMany("Dishes")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Student", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.StudyRoom", b =>
                {
                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Library", "Library")
                        .WithMany("StudyRooms")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.ApplicationUser", "Renter")
                        .WithMany()
                        .HasForeignKey("RenterId");

                    b.HasOne("WebUni_Management.Infrastructure.Data.Models.Student", null)
                        .WithMany("RentedStudyRooms")
                        .HasForeignKey("StudentId");

                    b.Navigation("Library");

                    b.Navigation("Renter");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.BookCategory", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Library", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("StudyRooms");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Menu", b =>
                {
                    b.Navigation("Dishes");
                });

            modelBuilder.Entity("WebUni_Management.Infrastructure.Data.Models.Student", b =>
                {
                    b.Navigation("RentedBooks");

                    b.Navigation("RentedStudyRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
